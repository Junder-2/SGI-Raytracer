#include "Utility/Common.cginc"
#include "Utility/Skybox.cginc"

#pragma max_recursion_depth 10

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float _PixelSpreadAngle;

bool _CullBackfaces;
bool _UseSkyBox;

RWTexture2D<float4> _RenderTarget;

TextureCube<float3> g_EnvTex;
SamplerState sampler_linear_repeat;

float3 _BottomSkyColor;
float3 _TopSkyColor;

float _IndirectSkyStrength;

int _FrameIndex;

[shader("raygeneration")]
void Raytracer()
{
    uint3 dispatchId = DispatchRaysIndex();
    uint3 dispatchDim = DispatchRaysDimensions();

    // init random seed from current pixel location and frame index
	uint seed = initRand(dispatchId.x + dispatchId.y * dispatchDim.x, _FrameIndex);

    //float2 variance = float2(nextRand(seed), nextRand(seed));

    float2 uv = (dispatchId.xy + float2(.5f,.5f)) / float2(dispatchDim.x, dispatchDim.y) * 2.0f - 1.0f;
	
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
        
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    RayDesc ray;
    ray.Origin = origin; 
    ray.Direction = direction; 
    ray.TMin = 0;
    ray.TMax = gClipDistance;

    RayPayload payload;
    payload.color = float4(0, 0, 0, 0);
    payload.randomSeed = seed;
	payload.depth = 0;
    //payload.lastPos = _WorldSpaceCameraPos;
    payload.frameIndex = dispatchId.x+dispatchId.y+(_FrameIndex % 2 ? 1 : 0);
    payload.data = 0;

    payload.rayConeSpreadAngle = _PixelSpreadAngle;
    payload.rayConeWidth = 0;

    uint flags = 0;

    if(_CullBackfaces)
        flags |= RAY_FLAG_CULL_BACK_FACING_TRIANGLES; 

    TraceRay(_RaytracingAccelerationStructure, flags, 0xFF, 0, 1, 0, ray, payload);

    _RenderTarget[dispatchId.xy] = payload.color;
}

[shader("miss")]
void MyMissShader(inout RayPayload payload : SV_RayPayload)
{
    uint param = payload.data & 0xF;
    
    if(param == 0)
    {
        if(_UseSkyBox)
        {
            payload.color = float4(g_EnvTex.SampleLevel(sampler_linear_repeat, WorldRayDirection(), 0), 1);
        }
        else
        {
            half3 rayDir = WorldRayDirection();
            payload.color = float4(lerp(_BottomSkyColor, _TopSkyColor, rayDir.y * 0.5f + 0.5f), 1);  
        }             
    }
    else if(param == 0x1)
    {            
        payload.color = 0;
    }
    else if(param == 0x2)
    {
        if(_UseSkyBox)
        {
            payload.color = float4(g_EnvTex.SampleLevel(sampler_linear_repeat, WorldRayDirection(), 0)*_IndirectSkyStrength, 1);
        }
        else
        {
            half3 rayDir = WorldRayDirection();
            payload.color = float4(lerp(_BottomSkyColor, _TopSkyColor, rayDir.y * 0.5f + 0.5f)*_IndirectSkyStrength, 1);  
        }         
    }
}

[shader("miss")]
void ShadowMiss(inout ShadowHitInfo hit : SV_RayPayload)
{ 
    hit.isHit = 0;
}
/*
// "back up" closest hit shader. it is used when we hit material without raytracing shader pass
[shader("closesthit")]
void ClosestHitMain(inout RayPayload payload : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
{
	// simply return pink color to signal error
	payload.color = float4(1.0f, 0.0f, 0.5f, 1);
}
*/